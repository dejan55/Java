import java.util.Scanner;

class InvalidExtraTypeException extends Exception{
    public InvalidExtraTypeException(){
    	super("InvalidExtraTypeException");
    }

}
class InvalidPizzaTypeException extends Exception{
    public InvalidPizzaTypeException(){
    	super("InvalidPizzaTypeException");
    }
}
class OrderLockedException extends Exception{
    public OrderLockedException(){
    	super("OrderLockedException");
    }
}
class EmptyOrder extends Exception{
    public EmptyOrder(){
    	super("EmptyOrder");
    }
}
class NoPizzaException extends Exception{
    public NoPizzaException(){
    	super("NoPizzaException");
    }
}
interface Item{
	int getPrice();
}
class ExtraItem implements Item{
	private String type;
    public ExtraItem(String type) throws Exception{
    	if(!((type.equals("Coke"))||type.equals("Ketchup"))) throw new InvalidExtraTypeException();
        this.type=type;
    }
    public int getPrice(){
    	if(type.equals("Coke")) return 5;
        else return 3;
    }
	public String toString(){
		return type;
	}

}
class PizzaItem implements Item{
	private String type;
    public PizzaItem(String type) throws InvalidPizzaTypeException{
    	if(!((type.equals("Standard"))||type.equals("Pepperoni")||type.equals("Vegetarian"))) throw new InvalidPizzaTypeException();
        this.type=type;
    }
    public int getPrice(){
    	if(type.equals("Standard")) return 10;
        else if(type.equals("Pepperoni")) return 12;
        return 8;
    }
	public String toString(){
		return type;
	}

}
class Order{
    private int br,br2;
    private Item[] it;
    private int[] a,b;
    private boolean lockON;
    public Order(){
    	it=new Item[10];
        br=0;
        a=new int[50];
		b=new int[50];
        br2=0;
        lockON=false;
    }
    public void addItem(Item item,int count) throws Exception{
    	if(lockON) throw new OrderLockedException();
        if(count>10) throw new Exception();
        for(int i=0;i<count;i++){
            it[br++]=item;
			}
		b[br2]=br;
        a[br2++]=count;
    }
    public int getPrice(){
    	int sum=0;
        for(int i=0;i<br;i++)
           sum+=it[i].getPrice();
       return sum;
    }
    public void displayOrder(){
    	String s="";
        for(int i=0;i<br2;i++){
        	s+=(i+1)+"."+it[b[i]-1]+"\t"+" x"+a[i]+"   "+it[b[i]-1].getPrice()*a[i]+"$\n";
        }
		s+="Total\t\t"+getPrice()+"$";
        System.out.println(s);
    }
    public void removeItem(int idx) throws Exception{
    	if(lockON) throw new OrderLockedException();
        if(idx>=br) throw new ArrayIndexOutOfBoundsException(idx);
        Item[] tmp=new Item[100];
        for(int i=0;i<br-1;i++)
            if(i<idx) tmp[i]=it[i];
            else tmp[i]=it[i+1];
        it=tmp;
        br--;
		br2--;
    }
    public void lock() throws EmptyOrder,NoPizzaException{
    	int a=1;
        if(it[0]==null) throw new EmptyOrder();
        for(int i=0;i<br;i++)
            if(it[i] instanceof PizzaItem) {a=0;break;}
        if(a==1) throw new NoPizzaException();
        lockON=true;
            
    }
}
public class PizzaOrderTest {
	
	public static void main(String[] args) {
		Scanner jin = new Scanner(System.in);
		int k = jin.nextInt();
		if ( k == 0 ) { //test Item
			try {
			String type = jin.next();
			String name = jin.next();
			Item item = null; 
			if ( type.equals("Pizza") ) item = new PizzaItem(name);
			else item = new ExtraItem(name);
			System.out.println(item.getPrice());
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
		}
		if ( k == 1 ) { // test simple order
			Order order = new Order();
			while ( true ) {		
				try {	
				String type = jin.next();
				String name = jin.next();
				Item item = null; 
				if ( type.equals("Pizza") ) item = new PizzaItem(name);
				else item = new ExtraItem(name);
				if ( !jin.hasNextInt() ) break;
				order.addItem(item, jin.nextInt());
				} catch (Exception e) {
					System.out.println(e.getClass().getSimpleName());
				}
			}
			jin.next();
			System.out.println(order.getPrice());
			order.displayOrder();
			while ( true ) {
				try {	
				String type = jin.next();
				String name = jin.next();
				Item item = null; 
				if ( type.equals("Pizza") ) item = new PizzaItem(name);
				else item = new ExtraItem(name);
				if ( ! jin.hasNextInt() ) break;
				order.addItem(item, jin.nextInt());
				} catch (Exception e) {
					System.out.println(e.getClass().getSimpleName());
				}
			}
			System.out.println(order.getPrice());
			order.displayOrder();
		}
		if ( k == 2 ) { // test order with removing
			Order order = new Order();
			while ( true ) {
						
				try {	
				String type = jin.next();
				String name = jin.next();
				Item item = null; 
				if ( type.equals("Pizza") ) item = new PizzaItem(name);
				else item = new ExtraItem(name);
				if ( !jin.hasNextInt() ) break;
				order.addItem(item, jin.nextInt());
				} catch (Exception e) {
					System.out.println(e.getClass().getSimpleName());
				}
			}
			jin.next();
			System.out.println(order.getPrice());
			order.displayOrder();
			while ( jin.hasNextInt() ) {
				try {	
				int idx = jin.nextInt();
				order.removeItem(idx);
				} catch (Exception e) {
					System.out.println(e.getClass().getSimpleName());
				}
			}
			System.out.println(order.getPrice());
			order.displayOrder();
		}
        if ( k == 3 ) { //test locking & exceptions
			Order order = new Order();
			try {
				order.lock();
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
			try {
				order.addItem(new ExtraItem("Coke"), 1);
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			} 
			try {
				order.lock();
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
			try {
				order.addItem(new PizzaItem("Standard"), 1);
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
			try {
				order.lock();
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
			try {
				order.addItem(new PizzaItem("Standard"), 1);
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
			try {
				order.removeItem(0);
			} catch (Exception e) {
				System.out.println(e.getClass().getSimpleName());
			}
		}
	}

}
